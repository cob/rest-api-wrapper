{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "RecordM API",
    "description" : "The RecordM REST API<br/><br/> **Note**: To  use the 'Try it out' buttons, you must be [logged in](/).",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/recordm"
  } ],
  "security" : [ {
    "cobtoken" : [ ]
  } ],
  "tags" : [ {
    "name" : "Definitions",
    "description" : "Definition endpoints"
  }, {
    "name" : "Search",
    "description" : "Search endpoints"
  }, {
    "name" : "Domains",
    "description" : "Domains endpoints"
  }, {
    "name" : "Instances",
    "description" : "Operations over instances"
  }, {
    "name" : "Integration",
    "description" : "Simplified operations over Instances"
  } ],
  "paths" : {
    "/recordm/definitions/{definitionId}/clone" : {
      "post" : {
        "tags" : [ "Definitions" ],
        "summary" : "Clones an existing definition",
        "operationId" : "cloneDefinition",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The created definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDefinition"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FieldError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "Definition not found"
          }
        }
      }
    },
    "/recordm/definitions/{definitionId}" : {
      "get" : {
        "tags" : [ "Definitions" ],
        "summary" : "Retrieves a specific definition including its fields.",
        "description" : "Retrieves the full details about a specific definition. When setting export to true it will return a clone of the definition.",
        "operationId" : "getDefinition",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "If-None-Match",
          "in" : "header",
          "description" : "If a value is given, it will be compared to the current version of the definition and if they are equal, a 304 will be returned.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "export",
          "in" : "query",
          "description" : "When true it will return a clone of the definition",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDefinition"
                }
              }
            }
          },
          "304" : {
            "description" : "The version of the definition matches the If-None-Match HTTP Header. No definition is returned."
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "404" : {
            "description" : "Definition could not be found"
          }
        }
      },
      "put" : {
        "tags" : [ "Definitions" ],
        "summary" : "Update an existing definition",
        "operationId" : "updateDefinition",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The definition object with the updated details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateDefinitionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated definition with field definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDefinition"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FieldError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "Definition not found"
          },
          "409" : {
            "description" : "The received version is outdated"
          }
        }
      },
      "delete" : {
        "tags" : [ "Definitions" ],
        "summary" : "Delete an existing definition",
        "operationId" : "deleteDefinition",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Definition was deleted"
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "Definition not found"
          }
        }
      }
    },
    "/recordm/definitions/{definitionId}/export" : {
      "get" : {
        "tags" : [ "Definitions" ],
        "summary" : "Download a definition",
        "operationId" : "exportDefinition",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The definition statistics"
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "examples" : {
                  "message" : {
                    "description" : "message",
                    "value" : {
                      "error" : "the error details"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      }
    },
    "/recordm/definitions" : {
      "get" : {
        "tags" : [ "Definitions" ],
        "summary" : "Retrieves all definitions",
        "description" : "Retrieves a sinple representation of all enabled definitions by default.  To include disabled definitions set the query parameter `includeDisbaled` to true.  The result will not include the field definitions.",
        "operationId" : "getAllDefinitions",
        "parameters" : [ {
          "name" : "includeDisabled",
          "in" : "query",
          "description" : "If it should include inactive definitions",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Restrict results to definitons with name matching",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A simple representation of the definition without field definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DecoratedDefinition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          }
        }
      },
      "post" : {
        "tags" : [ "Definitions" ],
        "summary" : "Create a new definition",
        "operationId" : "saveDefinition",
        "requestBody" : {
          "description" : "The new definition payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDefinitionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A simple representation of the definition created without field definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDefinition"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FieldError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      }
    },
    "/recordm/definitions/name/{name}" : {
      "get" : {
        "tags" : [ "Definitions" ],
        "summary" : "Retrieves a specific that match a provided name.",
        "description" : "Retrieves the full details about a definition.",
        "operationId" : "getDefinitionByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The definition name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDefinition"
                }
              }
            }
          },
          "401" : {
            "description" : "If there was an unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "No definition could be found matching the provided name"
          }
        }
      }
    },
    "/recordm/definitions/stats" : {
      "get" : {
        "tags" : [ "Definitions" ],
        "summary" : "Retrieves statistics about a definition.",
        "description" : "Retrieves the sta",
        "operationId" : "getDefinitionStats",
        "parameters" : [ {
          "name" : "defId",
          "in" : "query",
          "description" : "The definition identifier",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "def",
          "in" : "query",
          "description" : "The definition name",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The definition statistics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinitionStats"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "examples" : {
                  "message" : {
                    "description" : "message",
                    "value" : {
                      "error" : "the error details"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      }
    },
    "/recordm/definitions/{definitionId}/state/{state}" : {
      "put" : {
        "tags" : [ "Definitions" ],
        "summary" : "Change the state of an existing definition",
        "operationId" : "updateDefinitionState",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "state",
          "in" : "path",
          "description" : "The new state",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The updated definition with field definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDefinition"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "Definition not found"
          }
        }
      }
    },
    "/recordm/definitions/search" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Search Definition",
        "description" : "The preferred endpoint for searches. Search instances of a definition specified either by id or by name, using ES query_string. Supports multiple sorts.See [the ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/query-dsl-query-string-query.html#query-string-syntax) for syntax details.",
        "operationId" : "searchInDefinition",
        "parameters" : [ {
          "name" : "defId",
          "in" : "query",
          "description" : "The definition Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "def",
          "in" : "query",
          "description" : "The definition name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The query",
          "schema" : {
            "type" : "string",
            "default" : "*"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "the first result to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "the number of results to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 30
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A comma-separated list of <field>:<direction> pairs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Structured Search of Definition",
        "description" : "Search the definition specified either by id or name, using a structured ES search request. See [the ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/query-dsl.html) for details on query syntax.",
        "operationId" : "structuredSearchInDefinition",
        "parameters" : [ {
          "name" : "defId",
          "in" : "query",
          "description" : "The definition Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "def",
          "in" : "query",
          "description" : "The definition name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "typed_keys",
          "in" : "query",
          "description" : "When asking for aggregations, should they be prefixed with the aggregation type? The same behaviour as specified in [ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-aggregations.html#return-agg-type)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "requestBody" : {
          "description" : "The JSON of the ES query.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              },
              "example" : {
                "query" : {
                  "match_all" : { }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/recordm/definitions/search/stream" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Stream a Definition Search",
        "description" : "Stream through all the results of a Definition search. Useful when needing to process more than the 10.000 results available through the normal search. The arguments are the same as on a normal search, excluding `size` and `from`, that are not needed.",
        "operationId" : "streamSearchInDefinition",
        "parameters" : [ {
          "name" : "defId",
          "in" : "query",
          "description" : "The definition Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "def",
          "in" : "query",
          "description" : "The definition name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The query",
          "schema" : {
            "type" : "string",
            "default" : "*"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A comma-separated list of <field>:<direction> pairs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Stream a Definition Search",
        "description" : "Stream through all the results of a Definition search. Useful when needing to process more than the 10.000 results available through the normal search. Accepts a structured ES search request. See [the ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/query-dsl.html) for details on query syntax.Does <strong>NOT</strong> accept aggregations, use the normal search endpoint for them.",
        "operationId" : "streamStructuredSearchInDefinition",
        "parameters" : [ {
          "name" : "defId",
          "in" : "query",
          "description" : "The definition Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "def",
          "in" : "query",
          "description" : "The definition name",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON of the ES query.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              },
              "example" : {
                "query" : {
                  "match_all" : { }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/recordm/domains/{domainId}/definitions/{definitionId}" : {
      "put" : {
        "tags" : [ "Domains" ],
        "summary" : "Add a new definition to an existing domain",
        "description" : "The response will return the domain with its definitions but not with it's field definitions.",
        "operationId" : "addDefinitionToDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "The domain identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The domain updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDomain"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "Remove a definition from an existing domain",
        "description" : "The response will return the domain with its definitions but not with it's field definitions.",
        "operationId" : "removeDefinitionFromDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "The domain identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The definition identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The domain updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDomain"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      }
    },
    "/recordm/domains" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Retrieves all domains",
        "description" : "It will include all definitions belonging to this domain but the definitions will not include it's field definitions.",
        "operationId" : "getAllDomains",
        "responses" : {
          "200" : {
            "description" : "The list of domains",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DecoratedDomain"
                  }
                }
              }
            }
          },
          "304" : {
            "description" : "The version of the definition matches the If-None-Match HTTP Header. No definition is returned."
          },
          "401" : {
            "description" : "Unauthorized access."
          }
        }
      },
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Creates a new domain",
        "operationId" : "addDomain",
        "requestBody" : {
          "description" : "The new definition details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDomainRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The created domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDomain"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FieldError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      }
    },
    "/recordm/domains/{domainId}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Retrieve a domain by it's identifier",
        "description" : "It will include all definitions belonging to this domain but the definitions will not include it's field definitions.",
        "operationId" : "getDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "The domain identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "If-None-Match",
          "in" : "header",
          "description" : "If a value is given, it will be compared to the current version of the domain and if they are equal, a 304 will be returned.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDomain"
                }
              }
            }
          },
          "304" : {
            "description" : "The version of the definition matches the If-None-Match HTTP Header. No definition is returned."
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "Domain could not be found"
          }
        }
      },
      "put" : {
        "tags" : [ "Domains" ],
        "summary" : "Update an existing domain",
        "operationId" : "updateDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "The domain identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The new definition details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateDomainRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The domain updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDomain"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FieldError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "Delete an existing domain",
        "operationId" : "deleteDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The domains was deleted"
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          }
        }
      }
    },
    "/recordm/domains/name/{name}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Find a domain by name",
        "description" : "It will include all definitions belonging to this domain but the definitions will not include it's field definitions.",
        "operationId" : "findDomainByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The domain name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecoratedDomain"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access."
          },
          "403" : {
            "description" : "The user is not allowed to perfom the operation"
          },
          "404" : {
            "description" : "Domain could not be found"
          }
        }
      }
    },
    "/recordm/domains/search" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Search Domain",
        "description" : "Search instances of all definitions of a Domain, specified either by id or by name, using ES query_string. Supports multiple sorts.See [the ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/query-dsl-query-string-query.html#query-string-syntax) for syntax details.",
        "operationId" : "searchInDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "The domain Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "The domain name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The query",
          "schema" : {
            "type" : "string",
            "default" : "*"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "the first result to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "the number of results to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 30
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A comma-separated list of <field>:<direction> pairs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Structured Search of Domain",
        "description" : "Search instances of all definitions of a Domain, specified either by id or name, using a structured ES search request. See [the ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/query-dsl.html) for details on query syntax.",
        "operationId" : "searchStructuredInDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "The domain Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "The domain name",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON of the ES query.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              },
              "example" : {
                "query" : {
                  "match_all" : { }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/recordm/domains/search/stream" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Stream a Domain Search",
        "description" : "Stream through all the results of a Domain search. Useful when needing to process more than the 10.000 results available through the normal search. The arguments are the same as on a normal search, excluding `size` and `from`, that are not needed.",
        "operationId" : "streamSearchInDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "The domain Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "The domain name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The query",
          "schema" : {
            "type" : "string",
            "default" : "*"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A comma-separated list of <field>:<direction> pairs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Stream a Definition Search",
        "description" : "Stream through all the results of a Definition search. Useful when needing to process more than the 10.000 results available through the normal search. Accepts a structured ES search request. See [the ES docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/query-dsl.html) for details on query syntax.Does <strong>NOT</strong> accept aggregations, use the normal search endpoint for them.",
        "operationId" : "streamStructuredSearchInDomain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "query",
          "description" : "The domain Id",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "The domain name",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON of the ES query.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              },
              "example" : {
                "query" : {
                  "match_all" : { }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/recordm/instances" : {
      "post" : {
        "tags" : [ "Instances" ],
        "summary" : "Add an instance",
        "description" : "Adds a new instance represented by the passed Object.",
        "operationId" : "addInstance",
        "requestBody" : {
          "description" : "the instance to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Instance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A JSON object that can contain warnings thrown when creating",
            "content" : {
              "application/json" : {
                "example" : {
                  "errors" : [ {
                    "errorCode" : "auto.undefined-lib",
                    "auto.undefined-lib" : "ref"
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "The specified definition in the instance JSON was not found."
          }
        }
      }
    },
    "/recordm/instances/{id}/log" : {
      "post" : {
        "tags" : [ "Instances" ],
        "summary" : "Add log to instance",
        "description" : "Adds a LogM log entry to an instance.",
        "operationId" : "addLogMessageToInstance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The instance id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The log message",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/recordm/instances/{id}" : {
      "get" : {
        "tags" : [ "Instances" ],
        "summary" : "Get an instance",
        "description" : "Obtains a representation of an instance.",
        "externalDocs" : {
          "url" : "/docs/instance_get.html"
        },
        "operationId" : "getInstance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "If-None-Match",
          "in" : "header",
          "description" : "If a value is given, it will be compared to the current version of the instance and if they are equal, a 304 will be returned.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The instance was found and a representation of the instance is returned.",
            "content" : {
              "application/json" : { },
              "text/plain" : { }
            }
          },
          "304" : {
            "description" : "The version of the instance matches the If-None-Match HTTP Header. No instance is returned."
          },
          "404" : {
            "description" : "An instance with the specified id was not found."
          }
        }
      },
      "put" : {
        "tags" : [ "Instances" ],
        "summary" : "Update an instance",
        "description" : "Updates an instance with the complete representation passed.",
        "operationId" : "updateInstance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the instance to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "acceptOutdated",
          "in" : "query",
          "description" : "Should outdated $extRef fields be accepted?",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "the updated instance",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Instance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A JSON object that can contain warnings thrown when updating",
            "content" : {
              "application/json" : {
                "example" : {
                  "errors" : [ {
                    "errorCode" : "auto.undefined-lib",
                    "auto.undefined-lib" : "ref"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Some error ocurred while trying to update",
            "content" : {
              "text/plain" : {
                "example" : "\"Version null not allowed\" OR [Field errors,...] OR [Integration errors,...]"
              }
            }
          },
          "404" : {
            "description" : "instance not found"
          },
          "408" : {
            "description" : "Timeout updating the instance"
          },
          "409" : {
            "description" : "The received version is outdated"
          },
          "500" : {
            "description" : "There were errors updating the instance",
            "content" : {
              "text/plain" : {
                "example" : "UNKNOWN"
              },
              "application/json" : {
                "example" : [ {
                  "field" : "1:Field Name:Field Value",
                  "errorType:" : "NOT_A_NUMBER"
                } ]
              }
            }
          },
          "503" : {
            "description" : "Outdated $extRef fields were accepted but could not be updated"
          }
        }
      },
      "delete" : {
        "tags" : [ "Instances" ],
        "summary" : "Delete an instance",
        "description" : "Deletes an instance.",
        "operationId" : "deleteInstance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the instance to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ignoreRefs",
          "in" : "query",
          "description" : "If ignoreRefs is true, then the instance will be deleted even if other instances are referencing it. Otherwise an error will be returned if there are instances with a reference to it. ",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/recordm/instances/{id}/files/{fieldDefinitionId}/{filename}" : {
      "get" : {
        "tags" : [ "Instances" ],
        "summary" : "Download file from field in instance",
        "description" : "Download a file that is attached to a $file field",
        "externalDocs" : {
          "url" : "/docs/instance_download_file.html"
        },
        "operationId" : "downloadFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the instance",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldDefinitionId",
          "in" : "path",
          "description" : "The id of the field definition of the $file field",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filename",
          "in" : "path",
          "description" : "The filename of the file to download.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "disposition",
          "in" : "query",
          "description" : "The Content-Disposition to use when downloading the file. Only useful when used as link in a webpage, to control if it should be downloaded or shown inline.",
          "schema" : {
            "type" : "string",
            "default" : "attachment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The download starts."
          },
          "404" : {
            "description" : "Either the instance or the file were not found. The response message will have more details."
          }
        }
      }
    },
    "/recordm/instances/empty/definition/{definitionId}" : {
      "get" : {
        "tags" : [ "Instances" ],
        "summary" : "Get a new empty instance",
        "description" : "Obtains a representation of an instance with no values. Useful for using as a starting point for creating a new instance.",
        "operationId" : "getNewInstance",
        "parameters" : [ {
          "name" : "definitionId",
          "in" : "path",
          "description" : "The id of the definition of which we want the empty instance.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "withDefaults",
          "in" : "query",
          "description" : "If true, all the fields with defined default values will have them already filled. If false, all the fields will have empty values.",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An empty instance.",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The specified definition was not found."
          }
        }
      }
    },
    "/recordm/instances/{id}/files/{fieldDefinitionId}" : {
      "post" : {
        "tags" : [ "Instances" ],
        "summary" : "Upload file to field in instance",
        "description" : "Upload a file to be used as a value for a $file field",
        "externalDocs" : {
          "url" : "/docs/instance_upload_file.html"
        },
        "operationId" : "uploadFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "When uploading to an existing instance, it's the id of the instance. When uploading for an instance that doesn't yet exist, it should be an UUID that matches the one the instance will have on creation. This way the already uploaded files will be moved to the final destination.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldDefinitionId",
          "in" : "path",
          "description" : "The id of the field definition of the $file field",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "object",
                    "description" : "The file to upload."
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The upload was done successfully. For compatibility with IE, the response wraps the uploaded filename in a &lt;textarea/&gt;. ",
            "content" : {
              "text/html" : {
                "example" : "<textarea>uploaded_file.txt</textarea>"
              }
            }
          }
        }
      }
    },
    "/recordm/instances/integration" : {
      "put" : {
        "tags" : [ "Integration" ],
        "summary" : "Update one or more instances",
        "description" : "Updates the matching instances with the passed updates.",
        "externalDocs" : {
          "url" : "/docs/instance_integration.html"
        },
        "operationId" : "update",
        "requestBody" : {
          "description" : "A JSON doc of the specified format",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IntegrationUpdateMessage"
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "The body doesn't contain type and/or condition fields."
          },
          "200" : {
            "description" : "A summary of the operations performed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IntegrationStats"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Integration" ],
        "summary" : "Create an instance",
        "description" : "Adds a new instance represented by the passed Object.",
        "externalDocs" : {
          "url" : "/docs/instance_integration.html"
        },
        "operationId" : "add",
        "requestBody" : {
          "description" : "A JSON doc of the specified format",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IntegrationAddMessage"
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "The body doesn't contain a type field."
          },
          "404" : {
            "description" : "No definition was found that matches the type field."
          },
          "200" : {
            "description" : "The created instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Instance"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration" ],
        "summary" : "Deletes one or more instances",
        "description" : "Deletes the instances that match the condition.",
        "externalDocs" : {
          "url" : "/docs/instance_integration.html"
        },
        "operationId" : "delete",
        "requestBody" : {
          "description" : "A JSON doc of the specified format",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IntegrationDeleteMessage"
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "The body doesn't contain type and/or condition fields."
          },
          "200" : {
            "description" : "A summary of the operations performed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IntegrationStats"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "IntegrationAddMessage" : {
        "required" : [ "type", "values" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The name of the Definition where to create the instances.",
            "example" : "A Definition"
          },
          "values" : {
            "type" : "object",
            "description" : "An object in which the keys are the field names, and the values are the values to be used to fill the fields.",
            "example" : {
              "Some Field" : "value for Some Field",
              "Parent Field/Other Field" : "value for an Other Field that is descendent of any Parent Field",
              "Parent Field=parent value/Other Field" : "value for an Other Field that is descendent of a Parent Field with value 'parent value'"
            }
          },
          "waitForSearchAvailability" : {
            "type" : "boolean",
            "description" : "A flag that makes the return wait for the record to be available for searching",
            "example" : true
          }
        }
      },
      "IntegrationUpdateMessage" : {
        "required" : [ "condition", "type", "values" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The name of the Definition of the instances we are updating.",
            "example" : "A Definition"
          },
          "condition" : {
            "type" : "string",
            "description" : "A condition to match the instances to update. Can be either an ES query string, or the special value \"recordmInstanceId:N[@V]\" to match a single instance. If the optional '@V' is used, the update will only take place if the instance N is at version V.",
            "example" : "some_field:some_value AND other_field:other_value"
          },
          "values" : {
            "type" : "object",
            "description" : "An object in which the keys are the field IDs or field paths, and the values are the values to be used to fill the fields.",
            "example" : {
              "Some Field" : "value for Some Field",
              "Parent Field/Other Field" : "value for an Other Field that is descendent of any Parent Field",
              "Parent Field=parent value/Other Field" : "value for an Other Field that is descendent of a Parent Field with value 'parent value'",
              "id:123" : "value for field with id 123"
            }
          }
        }
      },
      "IntegrationDeleteMessage" : {
        "required" : [ "condition", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The name of the Definition of the instances we are deleting.",
            "example" : "A Definition"
          },
          "condition" : {
            "type" : "string",
            "description" : "A condition to match the instances to delete. Can be either an ES query string, or the special value \"recordmInstanceId:N[@V]\" to match a single instance. If the optional '@V' is used, the update will only take place if the instance N is at version V.",
            "example" : "some_field:some_value AND other_field:other_value"
          },
          "ignoreRefs" : {
            "type" : "boolean",
            "description" : "See the Instance DELETE for details.",
            "example" : false
          }
        }
      },
      "DecoratedDefinition" : {
        "required" : [ "_links", "fieldDefinitions", "id", "name", "state", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "duplicable" : {
            "type" : "boolean"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "enabled", "disabled", "deleteInProgress" ]
          },
          "fieldDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "_links" : {
            "$ref" : "#/components/schemas/DefinitionLinks"
          }
        }
      },
      "DefinitionLinks" : {
        "required" : [ "export", "size" ],
        "type" : "object",
        "properties" : {
          "update" : {
            "type" : "string"
          },
          "export" : {
            "type" : "string"
          },
          "clone" : {
            "type" : "string"
          },
          "disable" : {
            "type" : "string"
          },
          "enable" : {
            "type" : "string"
          },
          "instantiate" : {
            "type" : "string"
          },
          "bulkRequest" : {
            "type" : "string"
          },
          "updateInstances" : {
            "type" : "string"
          },
          "delete" : {
            "type" : "string"
          },
          "size" : {
            "type" : "string"
          }
        }
      },
      "FieldDefinition" : {
        "required" : [ "duplicable", "fields", "groupField", "id", "name", "order" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string"
          },
          "required" : {
            "type" : "string"
          },
          "duplicable" : {
            "type" : "boolean"
          },
          "groupField" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          }
        }
      },
      "FieldError" : {
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string"
          },
          "errorType" : {
            "type" : "string",
            "enum" : [ "MANDATORY", "INVALID_FORMAT", "FIELD_TO_LONG", "DUPLICATE_DOMAIN_NAME", "DOMAIN_NAME_NOT_ALLOWED", "DUPLICATE_DEFINITION_NAME", "INVALID_FIELD_DEFINITION_NAME", "INVALID_FIELD_DEFINITION_DESCRIPTION", "NO_DEFINITION_FOUND", "DEFINITION_NOT_ENABLED", "NOT_A_NUMBER", "NOT_A_DATE", "NOT_AUTHORIZED_TO_EDIT_FIELD", "VALUE_NOT_SUPPORTED", "INSTANCE_REFERENCED", "EXT_REF_INVALID_STATE", "NOT_DUPLICABLE_FIELD", "WORKM_ERROR", "NOT_VALID_TASKS_FORMAT", "NOT_VALID_TASK" ]
          },
          "error" : {
            "type" : "string"
          }
        }
      },
      "Definition" : {
        "required" : [ "id", "name", "state", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "duplicable" : {
            "type" : "boolean"
          },
          "state" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "DefinitionStats" : {
        "type" : "object",
        "properties" : {
          "definition" : {
            "$ref" : "#/components/schemas/Definition"
          },
          "fields" : {
            "$ref" : "#/components/schemas/Fields"
          },
          "instances_on_db" : {
            "type" : "integer",
            "format" : "int64"
          },
          "instances_on_es" : {
            "type" : "integer",
            "format" : "int32"
          },
          "es_errors" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Fields" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32"
          },
          "$refs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "$extRefs" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CreateDefinitionRequest" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "duplicable" : {
            "type" : "boolean"
          },
          "fieldDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          }
        }
      },
      "UpdateDefinitionRequest" : {
        "required" : [ "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "duplicable" : {
            "type" : "boolean"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "enabled", "disabled", "deleteInProgress" ]
          },
          "fieldDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "DecoratedDomain" : {
        "required" : [ "_links", "definition", "id", "name", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "definitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Definition"
            }
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "_links" : {
            "$ref" : "#/components/schemas/DomainLinks"
          },
          "definition" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Definition"
            }
          }
        }
      },
      "DomainLinks" : {
        "required" : [ "size" ],
        "type" : "object",
        "properties" : {
          "update" : {
            "type" : "string"
          },
          "delete" : {
            "type" : "string"
          },
          "size" : {
            "type" : "string"
          }
        }
      },
      "CreateDomainRequest" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "definitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Definition"
            }
          }
        }
      },
      "UpdateDomainRequest" : {
        "required" : [ "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "definitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Definition"
            }
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Instance" : {
        "required" : [ "id", "instanceLabel", "jsonDefinition", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "attachmentPath" : {
            "type" : "string",
            "description" : "The relative path for the Instance's attached files. Normally the id of the instance.",
            "example" : "123456"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "instanceLabel" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "jsonDefinition" : {
            "$ref" : "#/components/schemas/Definition"
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InstanceField"
            }
          }
        }
      },
      "InstanceField" : {
        "required" : [ "duplicate", "fieldDefinition", "id", "label", "off", "upToDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "parent" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fieldDefinition" : {
            "$ref" : "#/components/schemas/FieldDefinition"
          },
          "value" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "permissions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "boolean"
            }
          },
          "duplicate" : {
            "type" : "boolean"
          },
          "off" : {
            "type" : "boolean"
          },
          "upToDate" : {
            "type" : "boolean"
          }
        }
      },
      "Task" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "TODO", "COMPLETE", "PLANNED" ]
          },
          "assignee" : {
            "$ref" : "#/components/schemas/TaskAssignee"
          },
          "date" : {
            "type" : "string",
            "format" : "date"
          },
          "correlationId" : {
            "type" : "string"
          },
          "permissions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "boolean"
            }
          }
        }
      },
      "TaskAssignee" : {
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          }
        }
      },
      "IntegrationStats" : {
        "required" : [ "deleted", "error", "forbidden", "updated" ],
        "type" : "object",
        "properties" : {
          "updated" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deleted" : {
            "type" : "integer",
            "format" : "int32"
          },
          "forbidden" : {
            "type" : "integer",
            "format" : "int32"
          },
          "error" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    },
    "securitySchemes" : {
      "cobtoken" : {
        "type" : "apiKey",
        "name" : "cobtoken",
        "in" : "cookie"
      }
    }
  }
}