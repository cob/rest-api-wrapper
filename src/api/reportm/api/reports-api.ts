/* tslint:disable */
/* eslint-disable */
/**
 * ReportM API
 * The ReportM REST API<br/><br/> **Note**: To  use the \'Try it out\' buttons, you must be [logged in](/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios"
import { Configuration } from "../configuration"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from "../common"
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "../base"
// @ts-ignore
import { ReportGenerationRequest } from "../model"

/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Can be used with both JSON - the simplest way when calling from other code (or even cURL) - or directly from an HTML form, in <code>application/x-www-form-urlencoded</code> format.
     * @summary Generate Report
     * @param {ReportGenerationRequest} [reportGenerationRequest] The params passed to the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate: async (
      reportGenerationRequest?: ReportGenerationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/report`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cobtoken required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        reportGenerationRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * To simplify development of new report templates. Arguments to the template can be passed as query string args.
     * @summary Test a report template
     * @param {any} [f] The template excel file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test: async (f?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/report/test`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication cobtoken required

      if (f !== undefined) {
        localVarFormParams.append("f", f as any)
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
  return {
    /**
     * Can be used with both JSON - the simplest way when calling from other code (or even cURL) - or directly from an HTML form, in <code>application/x-www-form-urlencoded</code> format.
     * @summary Generate Report
     * @param {ReportGenerationRequest} [reportGenerationRequest] The params passed to the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generate(
      reportGenerationRequest?: ReportGenerationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.generate(reportGenerationRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * To simplify development of new report templates. Arguments to the template can be passed as query string args.
     * @summary Test a report template
     * @param {any} [f] The template excel file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async test(
      f?: any,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.test(f, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ReportsApiFp(configuration)
  return {
    /**
     * Can be used with both JSON - the simplest way when calling from other code (or even cURL) - or directly from an HTML form, in <code>application/x-www-form-urlencoded</code> format.
     * @summary Generate Report
     * @param {ReportGenerationRequest} [reportGenerationRequest] The params passed to the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate(reportGenerationRequest?: ReportGenerationRequest, options?: any): AxiosPromise<void> {
      return localVarFp.generate(reportGenerationRequest, options).then((request) => request(axios, basePath))
    },
    /**
     * To simplify development of new report templates. Arguments to the template can be passed as query string args.
     * @summary Test a report template
     * @param {any} [f] The template excel file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test(f?: any, options?: any): AxiosPromise<void> {
      return localVarFp.test(f, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
  /**
   * Can be used with both JSON - the simplest way when calling from other code (or even cURL) - or directly from an HTML form, in <code>application/x-www-form-urlencoded</code> format.
   * @summary Generate Report
   * @param {ReportGenerationRequest} [reportGenerationRequest] The params passed to the report.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public generate(reportGenerationRequest?: ReportGenerationRequest, options?: AxiosRequestConfig) {
    return ReportsApiFp(this.configuration)
      .generate(reportGenerationRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * To simplify development of new report templates. Arguments to the template can be passed as query string args.
   * @summary Test a report template
   * @param {any} [f] The template excel file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public test(f?: any, options?: AxiosRequestConfig) {
    return ReportsApiFp(this.configuration)
      .test(f, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
