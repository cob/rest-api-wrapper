/* tslint:disable */
/* eslint-disable */
/**
 * RecordM API
 * The RecordM REST API<br/><br/> **Note**: To  use the \'Try it out\' buttons, you must be [logged in](/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios"
import { Configuration } from "../configuration"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from "../common"
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "../base"
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {
  Instance,
  IntegrationAddMessage,
  IntegrationDeleteMessage,
  IntegrationStats,
  IntegrationUpdateMessage,
} from "../model"

/**
 * IntegrationApi - axios parameter creator
 * @export
 */
export const IntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Deletes the instances that match the condition.
     * @summary Deletes one or more instances
     * @param {IntegrationDeleteMessage} [integrationDeleteMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      integrationDeleteMessage?: IntegrationDeleteMessage,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/recordm/instances/integration`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cobtoken required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        integrationDeleteMessage,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Adds a new instance represented by the passed Object.
     * @summary Create an instance
     * @param {IntegrationAddMessage} [integrationAddMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add: async (
      integrationAddMessage?: IntegrationAddMessage,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/recordm/instances/integration`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cobtoken required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(integrationAddMessage, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Updates the matching instances with the passed updates.
     * @summary Update one or more instances
     * @param {IntegrationUpdateMessage} [integrationUpdateMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      integrationUpdateMessage?: IntegrationUpdateMessage,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/recordm/instances/integration`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cobtoken required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        integrationUpdateMessage,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IntegrationApi - functional programming interface
 * @export
 */
export const IntegrationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IntegrationApiAxiosParamCreator(configuration)
  return {
    /**
     * Deletes the instances that match the condition.
     * @summary Deletes one or more instances
     * @param {IntegrationDeleteMessage} [integrationDeleteMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      integrationDeleteMessage?: IntegrationDeleteMessage,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationStats>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(integrationDeleteMessage, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Adds a new instance represented by the passed Object.
     * @summary Create an instance
     * @param {IntegrationAddMessage} [integrationAddMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async add(
      integrationAddMessage?: IntegrationAddMessage,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Instance>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.add(integrationAddMessage, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Updates the matching instances with the passed updates.
     * @summary Update one or more instances
     * @param {IntegrationUpdateMessage} [integrationUpdateMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      integrationUpdateMessage?: IntegrationUpdateMessage,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationStats>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(integrationUpdateMessage, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IntegrationApi - factory interface
 * @export
 */
export const IntegrationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = IntegrationApiFp(configuration)
  return {
    /**
     * Deletes the instances that match the condition.
     * @summary Deletes one or more instances
     * @param {IntegrationDeleteMessage} [integrationDeleteMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(integrationDeleteMessage?: IntegrationDeleteMessage, options?: any): AxiosPromise<IntegrationStats> {
      return localVarFp._delete(integrationDeleteMessage, options).then((request) => request(axios, basePath))
    },
    /**
     * Adds a new instance represented by the passed Object.
     * @summary Create an instance
     * @param {IntegrationAddMessage} [integrationAddMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(integrationAddMessage?: IntegrationAddMessage, options?: any): AxiosPromise<Instance> {
      return localVarFp.add(integrationAddMessage, options).then((request) => request(axios, basePath))
    },
    /**
     * Updates the matching instances with the passed updates.
     * @summary Update one or more instances
     * @param {IntegrationUpdateMessage} [integrationUpdateMessage] A JSON doc of the specified format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(integrationUpdateMessage?: IntegrationUpdateMessage, options?: any): AxiosPromise<IntegrationStats> {
      return localVarFp.update(integrationUpdateMessage, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * IntegrationApi - object-oriented interface
 * @export
 * @class IntegrationApi
 * @extends {BaseAPI}
 */
export class IntegrationApi extends BaseAPI {
  /**
   * Deletes the instances that match the condition.
   * @summary Deletes one or more instances
   * @param {IntegrationDeleteMessage} [integrationDeleteMessage] A JSON doc of the specified format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public _delete(integrationDeleteMessage?: IntegrationDeleteMessage, options?: AxiosRequestConfig) {
    return IntegrationApiFp(this.configuration)
      ._delete(integrationDeleteMessage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Adds a new instance represented by the passed Object.
   * @summary Create an instance
   * @param {IntegrationAddMessage} [integrationAddMessage] A JSON doc of the specified format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public add(integrationAddMessage?: IntegrationAddMessage, options?: AxiosRequestConfig) {
    return IntegrationApiFp(this.configuration)
      .add(integrationAddMessage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Updates the matching instances with the passed updates.
   * @summary Update one or more instances
   * @param {IntegrationUpdateMessage} [integrationUpdateMessage] A JSON doc of the specified format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public update(integrationUpdateMessage?: IntegrationUpdateMessage, options?: AxiosRequestConfig) {
    return IntegrationApiFp(this.configuration)
      .update(integrationUpdateMessage, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
