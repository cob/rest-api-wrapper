/* tslint:disable */
/* eslint-disable */
/**
 * RecordM API
 * The RecordM REST API<br/><br/> **Note**: To  use the \'Try it out\' buttons, you must be [logged in](/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDefinitionRequest } from '../model';
// @ts-ignore
import { DecoratedDefinition } from '../model';
// @ts-ignore
import { DefinitionStats } from '../model';
// @ts-ignore
import { FieldError } from '../model';
// @ts-ignore
import { UpdateDefinitionRequest } from '../model';
/**
 * DefinitionsApi - axios parameter creator
 * @export
 */
export const DefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clones an existing definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneDefinition1: async (definitionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            assertParamExists('cloneDefinition1', 'definitionId', definitionId)
            const localVarPath = `/recordm/definitions/{definitionId}/clone`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefinition1: async (definitionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            assertParamExists('deleteDefinition1', 'definitionId', definitionId)
            const localVarPath = `/recordm/definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download a definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportDefinition1: async (definitionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            assertParamExists('exportDefinition1', 'definitionId', definitionId)
            const localVarPath = `/recordm/definitions/{definitionId}/export`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a sinple representation of all enabled definitions by default.  To include disabled definitions set the query parameter `includeDisbaled` to true.  The result will not include the field definitions.
         * @summary Retrieves all definitions
         * @param {boolean} [includeDisabled] If it should include inactive definitions
         * @param {string} [name] Restrict results to definitons with name matching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefinitions1: async (includeDisabled?: boolean, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recordm/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required

            if (includeDisabled !== undefined) {
                localVarQueryParameter['includeDisabled'] = includeDisabled;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the full details about a specific definition. When setting export to true it will return a clone of the definition.
         * @summary Retrieves a specific definition including its fields.
         * @param {number} definitionId The definition identifier
         * @param {string} [ifNoneMatch] If a value is given, it will be compared to the current version of the definition and if they are equal, a 304 will be returned.
         * @param {boolean} [_export] When true it will return a clone of the definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition1: async (definitionId: number, ifNoneMatch?: string, _export?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            assertParamExists('getDefinition1', 'definitionId', definitionId)
            const localVarPath = `/recordm/definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required

            if (_export !== undefined) {
                localVarQueryParameter['export'] = _export;
            }

            if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
                localVarHeaderParameter['If-None-Match'] = String(ifNoneMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the full details about a definition.
         * @summary Retrieves a specific that match a provided name.
         * @param {string} name The definition name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionByName1: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getDefinitionByName1', 'name', name)
            const localVarPath = `/recordm/definitions/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the sta
         * @summary Retrieves statistics about a definition.
         * @param {number} [defId] The definition identifier
         * @param {string} [def] The definition name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionStats1: async (defId?: number, def?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recordm/definitions/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            if (def !== undefined) {
                localVarQueryParameter['def'] = def;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new definition
         * @param {CreateDefinitionRequest} [createDefinitionRequest] The new definition payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDefinition1: async (createDefinitionRequest?: CreateDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recordm/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDefinitionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing definition
         * @param {number} definitionId The definition identifier
         * @param {UpdateDefinitionRequest} [updateDefinitionRequest] The definition object with the updated details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinition1: async (definitionId: number, updateDefinitionRequest?: UpdateDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            assertParamExists('updateDefinition1', 'definitionId', definitionId)
            const localVarPath = `/recordm/definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDefinitionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change the state of an existing definition
         * @param {number} definitionId The definition identifier
         * @param {string} state The new state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinitionState1: async (definitionId: number, state: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            assertParamExists('updateDefinitionState1', 'definitionId', definitionId)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('updateDefinitionState1', 'state', state)
            const localVarPath = `/recordm/definitions/{definitionId}/state/{state}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"state"}}`, encodeURIComponent(String(state)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cobtoken required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefinitionsApi - functional programming interface
 * @export
 */
export const DefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Clones an existing definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneDefinition1(definitionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratedDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneDefinition1(definitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDefinition1(definitionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDefinition1(definitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Download a definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportDefinition1(definitionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportDefinition1(definitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a sinple representation of all enabled definitions by default.  To include disabled definitions set the query parameter `includeDisbaled` to true.  The result will not include the field definitions.
         * @summary Retrieves all definitions
         * @param {boolean} [includeDisabled] If it should include inactive definitions
         * @param {string} [name] Restrict results to definitons with name matching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDefinitions1(includeDisabled?: boolean, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DecoratedDefinition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDefinitions1(includeDisabled, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the full details about a specific definition. When setting export to true it will return a clone of the definition.
         * @summary Retrieves a specific definition including its fields.
         * @param {number} definitionId The definition identifier
         * @param {string} [ifNoneMatch] If a value is given, it will be compared to the current version of the definition and if they are equal, a 304 will be returned.
         * @param {boolean} [_export] When true it will return a clone of the definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinition1(definitionId: number, ifNoneMatch?: string, _export?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratedDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinition1(definitionId, ifNoneMatch, _export, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the full details about a definition.
         * @summary Retrieves a specific that match a provided name.
         * @param {string} name The definition name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinitionByName1(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratedDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinitionByName1(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the sta
         * @summary Retrieves statistics about a definition.
         * @param {number} [defId] The definition identifier
         * @param {string} [def] The definition name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinitionStats1(defId?: number, def?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefinitionStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinitionStats1(defId, def, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new definition
         * @param {CreateDefinitionRequest} [createDefinitionRequest] The new definition payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveDefinition1(createDefinitionRequest?: CreateDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratedDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveDefinition1(createDefinitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing definition
         * @param {number} definitionId The definition identifier
         * @param {UpdateDefinitionRequest} [updateDefinitionRequest] The definition object with the updated details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefinition1(definitionId: number, updateDefinitionRequest?: UpdateDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratedDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefinition1(definitionId, updateDefinitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change the state of an existing definition
         * @param {number} definitionId The definition identifier
         * @param {string} state The new state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefinitionState1(definitionId: number, state: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratedDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefinitionState1(definitionId, state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefinitionsApi - factory interface
 * @export
 */
export const DefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefinitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Clones an existing definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneDefinition1(definitionId: number, options?: any): AxiosPromise<DecoratedDefinition> {
            return localVarFp.cloneDefinition1(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefinition1(definitionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDefinition1(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download a definition
         * @param {number} definitionId The definition identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportDefinition1(definitionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.exportDefinition1(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a sinple representation of all enabled definitions by default.  To include disabled definitions set the query parameter `includeDisbaled` to true.  The result will not include the field definitions.
         * @summary Retrieves all definitions
         * @param {boolean} [includeDisabled] If it should include inactive definitions
         * @param {string} [name] Restrict results to definitons with name matching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefinitions1(includeDisabled?: boolean, name?: string, options?: any): AxiosPromise<Array<DecoratedDefinition>> {
            return localVarFp.getAllDefinitions1(includeDisabled, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the full details about a specific definition. When setting export to true it will return a clone of the definition.
         * @summary Retrieves a specific definition including its fields.
         * @param {number} definitionId The definition identifier
         * @param {string} [ifNoneMatch] If a value is given, it will be compared to the current version of the definition and if they are equal, a 304 will be returned.
         * @param {boolean} [_export] When true it will return a clone of the definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition1(definitionId: number, ifNoneMatch?: string, _export?: boolean, options?: any): AxiosPromise<DecoratedDefinition> {
            return localVarFp.getDefinition1(definitionId, ifNoneMatch, _export, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the full details about a definition.
         * @summary Retrieves a specific that match a provided name.
         * @param {string} name The definition name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionByName1(name: string, options?: any): AxiosPromise<DecoratedDefinition> {
            return localVarFp.getDefinitionByName1(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the sta
         * @summary Retrieves statistics about a definition.
         * @param {number} [defId] The definition identifier
         * @param {string} [def] The definition name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionStats1(defId?: number, def?: string, options?: any): AxiosPromise<DefinitionStats> {
            return localVarFp.getDefinitionStats1(defId, def, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new definition
         * @param {CreateDefinitionRequest} [createDefinitionRequest] The new definition payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDefinition1(createDefinitionRequest?: CreateDefinitionRequest, options?: any): AxiosPromise<DecoratedDefinition> {
            return localVarFp.saveDefinition1(createDefinitionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing definition
         * @param {number} definitionId The definition identifier
         * @param {UpdateDefinitionRequest} [updateDefinitionRequest] The definition object with the updated details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinition1(definitionId: number, updateDefinitionRequest?: UpdateDefinitionRequest, options?: any): AxiosPromise<DecoratedDefinition> {
            return localVarFp.updateDefinition1(definitionId, updateDefinitionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change the state of an existing definition
         * @param {number} definitionId The definition identifier
         * @param {string} state The new state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinitionState1(definitionId: number, state: string, options?: any): AxiosPromise<DecoratedDefinition> {
            return localVarFp.updateDefinitionState1(definitionId, state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefinitionsApi - object-oriented interface
 * @export
 * @class DefinitionsApi
 * @extends {BaseAPI}
 */
export class DefinitionsApi extends BaseAPI {
    /**
     * 
     * @summary Clones an existing definition
     * @param {number} definitionId The definition identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public cloneDefinition1(definitionId: number, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).cloneDefinition1(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing definition
     * @param {number} definitionId The definition identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public deleteDefinition1(definitionId: number, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).deleteDefinition1(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download a definition
     * @param {number} definitionId The definition identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public exportDefinition1(definitionId: number, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).exportDefinition1(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a sinple representation of all enabled definitions by default.  To include disabled definitions set the query parameter `includeDisbaled` to true.  The result will not include the field definitions.
     * @summary Retrieves all definitions
     * @param {boolean} [includeDisabled] If it should include inactive definitions
     * @param {string} [name] Restrict results to definitons with name matching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public getAllDefinitions1(includeDisabled?: boolean, name?: string, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).getAllDefinitions1(includeDisabled, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the full details about a specific definition. When setting export to true it will return a clone of the definition.
     * @summary Retrieves a specific definition including its fields.
     * @param {number} definitionId The definition identifier
     * @param {string} [ifNoneMatch] If a value is given, it will be compared to the current version of the definition and if they are equal, a 304 will be returned.
     * @param {boolean} [_export] When true it will return a clone of the definition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public getDefinition1(definitionId: number, ifNoneMatch?: string, _export?: boolean, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).getDefinition1(definitionId, ifNoneMatch, _export, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the full details about a definition.
     * @summary Retrieves a specific that match a provided name.
     * @param {string} name The definition name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public getDefinitionByName1(name: string, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).getDefinitionByName1(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the sta
     * @summary Retrieves statistics about a definition.
     * @param {number} [defId] The definition identifier
     * @param {string} [def] The definition name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public getDefinitionStats1(defId?: number, def?: string, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).getDefinitionStats1(defId, def, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new definition
     * @param {CreateDefinitionRequest} [createDefinitionRequest] The new definition payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public saveDefinition1(createDefinitionRequest?: CreateDefinitionRequest, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).saveDefinition1(createDefinitionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing definition
     * @param {number} definitionId The definition identifier
     * @param {UpdateDefinitionRequest} [updateDefinitionRequest] The definition object with the updated details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public updateDefinition1(definitionId: number, updateDefinitionRequest?: UpdateDefinitionRequest, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).updateDefinition1(definitionId, updateDefinitionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change the state of an existing definition
     * @param {number} definitionId The definition identifier
     * @param {string} state The new state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public updateDefinitionState1(definitionId: number, state: string, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).updateDefinitionState1(definitionId, state, options).then((request) => request(this.axios, this.basePath));
    }
}
